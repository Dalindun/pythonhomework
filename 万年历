from turtle import *
from datetime import datetime
import time
import turtle
global year,j,t,n
def jump(distanz, winkel=0):
    penup()
    right(winkel)
    forward(distanz)
    left(winkel)
    pendown()

def hand(laenge, spitze):
    fd(laenge*1.15)
    rt(90)
    fd(spitze/2.0)
    lt(120)
    fd(spitze)
    lt(120)
    fd(spitze)
    lt(120)
    fd(spitze/2.0)

def make_hand_shape(name, laenge, spitze):
    reset()
    jump(-laenge*0.15)
    begin_poly()
    hand(laenge, spitze)
    end_poly()
    hand_form = get_poly()
    register_shape(name, hand_form)

def clockface(radius):
    reset()
    pensize(7)
    for i in range(60):
        jump(radius)
        if i % 5 == 0:
            fd(25)
            jump(-radius-25)
        else:
            dot(3)
            jump(-radius)
        rt(6)

def setup():
    global second_hand, minute_hand, hour_hand, writer
    mode("logo")
    make_hand_shape("second_hand", 125, 25)
    make_hand_shape("minute_hand",  130, 25)
    make_hand_shape("hour_hand", 90, 25)
    clockface(160)
    second_hand = Turtle()
    second_hand.shape("second_hand")
    second_hand.color("gray20", "gray80")
    minute_hand = Turtle()
    minute_hand.shape("minute_hand")
    minute_hand.color("blue1", "red1")
    hour_hand = Turtle()
    hour_hand.shape("hour_hand")
    hour_hand.color("blue3", "red3")
    for hand in second_hand, minute_hand, hour_hand:
        hand.resizemode("user")
        hand.shapesize(1, 1, 3)
        hand.speed(0)
    ht()
    writer = Turtle()
    #writer.mode("logo")
    writer.ht()
    writer.pu()
    writer.bk(85)

def wochentag(t):
    wochentag = ["Monday", "Tuesday", "Wednesday",
        "Thursday", "Friday", "Saturday", "Sunday"]
    return wochentag[t.weekday()]
def datum(z):
    global j
    monat = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "June",
             "July", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."]
    m = monat[z.month - 1]
    t = z.day
    return "%s %d %d" % (m, t, j)
def tiangan(n):
    ge=int(n)%10
    #print('ge',ge)
    tt=ge-3
    #print(tt)
    if 6>=tt>=1:
        if tt==1:
            tiangan='甲' 
        elif tt==2:
            tiangan='乙'     
        elif tt==3:
            tiangan='丙'             
        elif tt==4:
            tiangan='丁'         
        elif tt==5:
            tiangan='戊'
        elif tt==6:
            tiangan='己' 
    
    else:
        tt+=10          
        if tt==7:
            tiangan='庚'
        elif tt==8:
            tiangan='辛'         
        elif tt==9:
            tiangan='壬'
        elif tt==10:
            tiangan='癸'             
    return tiangan  
        
        
def dizhi(n):
    di= int(n)%12
    di+=9
    #print(di,'di')
    if 12>= di>=9:
        if di==9:
            dizhi='申'
            shuxiang='候'
        elif di==10:
            dizhi='酉'
            shuxiang='鸡'
        elif di==11:
            dizhi='戌'
            shuxiang='狗'
        elif di==12:
            dizhi='亥'
            shuxiang='猪'
    else:
        di-=12
        if di==1:
            dizhi='子'
            shuxiang='鼠'
        elif di==2:
            dizhi='丑'
            shuxiang='牛'
        elif di==3:
            dizhi='寅'
            shuxiang='虎'
        elif di==4:
            dizhi='卯'
            shuxiang='兔'
        elif di==5:
            dizhi='辰'
            shuxiang='龙'
        elif di==6:
            dizhi='巳'
            shuxiang='蛇'
        elif di==7:
            dizhi='戊'
            shuxiang='马'
        elif di==8:
            dizhi='未'
            shuxiang='羊'
    return dizhi ,shuxiang
    return shuxiang
def jinian(n):   
    a=tiangan(n)
    l,z=dizhi(n)
    return (a,l,'年',z)
def shuzi(f):
    return f
def isYear(year):  
    if (year%4 == 0) & (year%100 != 0):  
        return("%d年是闰年" %year)  
    elif year%400 == 0:  
        return("'%d'年是闰年" %year)  
    else:  
        return("'%d'年不是闰年" %year) 
def puanduan():
    global year,j,n
    s=turtle.numinput('自定年份', '请输入年份',default=2018,minval=1900,maxval=2100)
    if s!=None:
       year=s
       j=year
       n=year
    elif s==None:
       year=int(time.strftime("%Y",time.localtime(time.time())))
       t = datetime.today()
       j=t.year
       n=int(time.strftime("%Y",time.localtime(time.time())))

def tick():
    f=time.strftime("%H:%M:%S",time.localtime(time.time()))
    t = datetime.today()
    sekunde = t.second + t.microsecond*0.000001
    minute = t.minute + sekunde/60.0
    stunde = t.hour + minute/60.0
    try:
        tracer(False)  # Terminator can occur here
        writer.clear()
        writer.home()
        writer.forward(65)
        writer.write(wochentag(t),
                     align="center", font=("Courier", 14, "bold"))
        writer.back(150)
        writer.write(datum(t),
                     align="center", font=("Courier", 14, "bold"))
        writer.forward(85)
        writer.write(jinian(n),
                     align="center", font=("Courier", 14, "bold"))
        writer.back(40)
        writer.write(shuzi(f),
                     align="center", font=("Courier", 14, "bold"))
        
        writer.forward(150)
        writer.write(isYear(year),
                     align="center", font=("Courier", 14, "bold"))
        
        writer.forward(150)
        tracer(True)
        second_hand.setheading(6*sekunde)  # or here
        minute_hand.setheading(6*minute)
        hour_hand.setheading(30*stunde)
        tracer(True)
        ontimer(tick, 100)
    except Terminator:
        pass  # turtledemo user pressed STOP
def main():    
    tracer(False)
    setup()
    tracer(True)
    tick()
    return "EVENTLOOP"

if __name__ == "__main__":
    puanduan()
    mode("logo")
    msg = main()
    print(msg)
    mainloop()
